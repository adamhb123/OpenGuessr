<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <!-- Photosphere viewer dependencies -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/photo-sphere-viewer.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/three/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/uevent@2/browser.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4.2.1/dist/photo-sphere-viewer.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/plugins/markers.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/plugins/markers.min.js"></script>

    <script src="/jsmodules/marker.js"></script>
    <script src="/jsmodules/utility.js"></script>
</head>
<body>
  <div id="portal-controls">
    <div class="controller-subcontainer top-align left-align">
      <input class="create-marker-text" id="create-marker-text-id-link" type="text" placeholder="Enter Link Portal ID"></input>
      <button class="create-marker-button" onclick="addMarker()">Create Marker</button>
      <button class="create-marker-button" onclick="finalizePortal()">Finalize Portal</button>
      <button class="create-marker-button" onclick="returnPortal()">Return to Portal</button>
    </div>
    <div class="controller-subcontainer top-align right-align">
      <div id="mode-text-div">
        <h1>Mode: Roaming</h1>
      </div>
      <button class="create-marker-button" id="portal-gallery-button" onclick="updateGallery().then(toggleGallery());">Portal Gallery</button>
    </div>
  </div>
  <div class="portal-gallery invisible">
    <% for (var i = 0; i < 3;  i++ ) { %>
    <div class="flex-grid">
      <% for (var j = 0; j < 6;  j++ ) { %>
        <div class="col">
          <img class="portal-thumbnail" src=""></img>
        </div>
      <% } %>
    </div>
    <% } %>
  </div>

  <div id="viewer"></div>
  <script>
      /* Photosphere */
      let creatingRect = false;
      let clickLocs = [];
      let createdMarkersCount = 0;
      let allowMarkerCreation = true;
      if('<%= panorama %>'.includes('undefined')) window.location.replace("/upload");
      var markerMasterList = [];
      var viewer = new PhotoSphereViewer.Viewer({
          plugins: [[PhotoSphereViewer.MarkersPlugin]],
          container: document.querySelector('#viewer'),
          panorama: '<%= panorama %>'
      });
      var markersPlugin = viewer.getPlugin(PhotoSphereViewer.MarkersPlugin);

      var viewerCanvas = null;
      console.log(`Canvas: ${viewerCanvas}`);

      if(window.addEventListener){
        window.addEventListener('load', ()=>{
          onloadActions();
        });
        document.addEventListener('contextmenu', function(e) {
          //alert("You've tried to open context menu"); //here you draw your own menu
          e.preventDefault();
        }, false);
      }
      else {
        window.attachEvent('onload', ()=>{
          onloadActions();
        });
        document.attachEvent('oncontextmenu', function() {
          //alert("You've tried to open context menu");
          window.event.returnValue = false;
        });
      }

      setModeText("Edit");

      const copyToClipboard = str => {
        const el = document.createElement('textarea');
        el.value = str;
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
      };

      function Marker(idLink, markerId, polygonRad){
        this.idLink = idLink;
        this.markerId = markerId;
        this.polygonRad = polygonRad;
      }
      function RGBA(r,g,b,a){
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
        this.getCSS = () => {
          return `rgba(${this.r},${this.g},${this.b},${this.a})`;
        }
      }

      function onloadActions(){
        updateGallery();
        let intid = setInterval(()=>{
          if(viewerCanvas == null){
            viewerCanvas = document.getElementsByClassName("psv-canvas");
            viewerCanvas = viewerCanvas.length > 0 ? viewerCanvas[0] : null;
          } else{
            clearInterval(intid);
          }
        }, 100);
      }

      function setModeText(mode){
        let textCont = document.getElementById("mode-text-div").getElementsByTagName('h1')[0];
        textCont.innerHTML = `Mode: ${mode}`;
      }

      function choice(choiceList) {
        var index = Math.floor(Math.random() * choiceList.length);
        return choiceList[index];
      }

      function getImageFileTypeFromPortalId(portalId){
        return new Promise((resolve, reject)=>{
          fetch("/portals").then(
           response => response.json()).then(
             data => {
               console.log(data);
               for(let i = 0; i < data.length; i++){
                 let dataSplit = data[i].split(".")
                 let id = dataSplit.slice(0, dataSplit.length-1).join();
                 console.log(`${id} == ${portalId} = ${id==portalId}`);

                 if(id == portalId){
                   resolve(dataSplit[dataSplit.length-1]);
                 }
               }
               reject(`Portal '${portalId}' does not exist!`);
             }
           );
        });
      }

      function viewPortal(idLink, fileType){
        allowMarkerCreation = false;
        setModeText("Roam");
        return new Promise((resolve, reject) => {
          console.log(`loading /images/panoramas/${idLink}.${fileType}`);
          //.filter(marker => marker.idLink == idLink)
          viewer.setPanorama(`/images/panoramas/${idLink}.${fileType}`).then(hideMarkers(markerMasterList)).then(resolve(`Successfully viewing portal ${idLink}!`));
        })
      }

      function loadPortal(idLink, fileType){
        //  Needs to load portal markers by getting the json data with all the
        //  portal data in it.
        markersPlugin.clearMarkers();
        viewer.setPanorama(`/images/panoramas/${idLink}.${fileType}`);
      }

      function transitionToViewPortal(idLink){
        getImageFileTypeFromPortalId(idLink).then(ft => viewPortal(idLink, ft));
      }

      function sendPost(type, data){
        let xhr = new XMLHttpRequest();
        xhr.open("POST", "editor", true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        let dataObj = {
          "type": type
        }
        dataObj = Object.assign(data, dataObj);
        console.log(dataObj);
        xhr.send(JSON.stringify(dataObj));
      }

      function finalizePortal(){
        sendPost("finalize portal", {"markers": markerMasterList});
      }

      function returnPortal(){
        return new Promise((resolve,reject)=>{
          setModeText("Edit");
          allowMarkerCreation = true;
          viewer.setPanorama("<%= panorama %>").then(unhideMarkers(markerMasterList));
        });
      }

      function updateGallery(){
        return new Promise((resolve, reject)=>{
          let images = [];
           fetch("/portals").then(
            response => response.json()).then(
              data => {
                let boxCount = 18;
                console.log(data);
                for(let i = 0; i < (data.length < boxCount ? data.length : boxCount); i++){
                  images.push(data[i]);
                }
                console.log(images);
                let imgs = document.getElementsByClassName("portal-thumbnail");
                console.log("Images: " + imgs.length);
                for(let i = 0; i < images.length; i++){
                  //  console.log("IMAGE: " + images[i]);
                  imgs[i].setAttribute("src","/images/panoramas/"+images[i]);
                  imgs[i].setAttribute("onclick","copyPortalId(this)");
                  imgs[i].className = "portal-thumbnail occupied";
                }
                for(let i = images.length; i < boxCount; i++){
                  imgs[i].className = "portal-thumbnail empty";
                }
                resolve(true);
              }
            );
        })
      }

      function toggleGallery(){
        let gallery = document.getElementsByClassName("portal-gallery")[0];
        if(gallery.className == "portal-gallery visible"){
          gallery.className = "portal-gallery invisible";
        }
        else{
          gallery.className = "portal-gallery visible";
        }
      }

      function copyPortalId(element){
        let im = element.src.split('.');
        im = im.slice(0,im.length-1).join();
        im = im.split("/");
        im = im[im.length-1];
        //im = im.split('=')[1];
        document.getElementById("create-marker-text-id-link").value = im;
        copyToClipboard(im);
        toggleGallery();
      }

      viewer.on('click', (e, data) => {
        if(!data.rightclick){
          if(!allowMarkerCreation) return;
          if(clickLocs.length == 0){
            clickLocs = [[data.longitude, data.latitude]];
            createPolygonRadMarker("transportMarker", clickLocs);
          }
          else if(clickLocs.length == 4){
            clickLocs = [];
            markersPlugin.removeMarker("transportMarker", markerMasterList);
          }
          else{
            clickLocs.push([data.longitude,data.latitude]);
            updatePolygonRadMarkerPosition("transportMarker", clickLocs);
          }
        }
      });


  </script>

</body>
</html>
