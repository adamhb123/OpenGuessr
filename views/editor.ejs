<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <!-- Photosphere viewer dependencies -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/photo-sphere-viewer.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/three/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/uevent@2/browser.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4.2.1/dist/photo-sphere-viewer.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/plugins/markers.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/plugins/markers.min.js"></script>
</head>
<body>
  <div id="portal-controls">
    <div class="controller-subcontainer top-align left-align">
      <input class="create-marker-text" id="create-marker-text-id-link" type="text" placeholder="Enter Link Portal ID"></input>
      <button class="create-marker-button" onclick="addMarker()">Create Marker</button>
      <button class="create-marker-button" onclick="finalizePortal()">Finalize Portal</button>
      <button class="create-marker-button" onclick="finalizePortal()">Return to Portal</button>
    </div>
    <div class="controller-subcontainer top-align right-align">
      <div id="mode-text-div">
        <h1>Mode: Roaming</h1>

      </div>
      <button class="create-marker-button" id="portal-gallery-button" onclick="updateGallery().then(toggleGallery());">Portal Gallery</button>
    </div>
  </div>
  <div id="portal-gallery">
    <div class="flex-grid">
      <div class="col">
        <img class="portal-thumbnail" src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
    </div>
    <div class="flex-grid">
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
    </div>
    <div class="flex-grid">
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
      <div class="col">
        <img class="portal-thumbnail"  src=""></img>
      </div>
    </div>
  </div>

  <div id="viewer"></div>
  <script>
      /* Photosphere */
      let creatingRect = false;
      let clickLocs = [];
      let markerMasterList = [];
      let createdMarkersCount = 0;
      let allowMarkerCreation = true;
      console.log('<%= panorama %>');
      if('<%= panorama %>'.includes('undefined')) window.location.replace("/upload");
      var viewer = new PhotoSphereViewer.Viewer({
          plugins: [[PhotoSphereViewer.MarkersPlugin]],
          container: document.querySelector('#viewer'),
          panorama: '<%= panorama %>'
      });
      var markersPlugin = viewer.getPlugin(PhotoSphereViewer.MarkersPlugin);

      if(window.addEventListener){
        window.addEventListener('load', updateGallery);
        document.addEventListener('contextmenu', function(e) {
          alert("You've tried to open context menu"); //here you draw your own menu
          e.preventDefault();
        }, false);
      }else{
        window.attachEvent('onload', updateGallery);
        document.attachEvent('oncontextmenu', function() {
          alert("You've tried to open context menu");
          window.event.returnValue = false;
        });
      }


      const copyToClipboard = str => {
        const el = document.createElement('textarea');
        el.value = str;
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
      };

      function Marker(idLink, markerId, polygonRad){
        this.idLink = idLink;
        this.markerId = markerId;
        this.polygonRad = polygonRad;
      }
      function RGBA(r,g,b,a){
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
        this.getCSS = () => {
          return `rgba(${this.r},${this.g},${this.b},${this.a})`;
        }
      }
      function createPolygonRadMarker(id, polygonRad, onClick=null){
        markersPlugin.addMarker({
          id: id,
          polygonRad: polygonRad,
        });
        if(onClick != null){
            markersPlugin.on("select-marker", onClick);
        }
      }
      function updatePolygonRadMarkerPosition(id, newPolygonRad){
        markersPlugin.updateMarker({
          id: id,
          polygonRad: newPolygonRad,
        });
      }
      function updatePolygonRadMarkerStyle(id, fillColor, strokeColor, strokeWidth){
        markersPlugin.updateMarker({
          id: id,
          svgStyle: {
            fill: fillColor.getCSS(),
            stroke: strokeColor.getCSS(),
            strokeWidth: `${strokeWidth}px`
          },
        });
      }
      function choice(choiceList) {
        var index = Math.floor(Math.random() * choiceList.length);
        return choiceList[index];
      }
      function createUUID(){
        var dt = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (dt + Math.random()*16)%16 | 0;
            dt = Math.floor(dt/16);
            return (c=='x' ? r :(r&0x3|0x8)).toString(16);
        });
        return uuid;
      }

      function getImageFileTypeFromPortalId(portalId){
        return new Promise((resolve, reject)=>{
          fetch("/portals").then(
           response => response.json()).then(
             data => {
               console.log(data);
               for(let i = 0; i < data.length; i++){
                 let dataSplit = data[i].split(".")
                 let id = dataSplit.slice(0, dataSplit.length-1).join();
                 console.log(`${id} == ${portalId} = ${id==portalId}`);

                 if(id == portalId){
                   resolve(dataSplit[dataSplit.length-1]);
                 }
               }
               reject(`Portal '${portalId}' does not exist!`);
             }
           );
        });
      }

      function hideMarkers(markers){
        console.log(markers);
        return new Promise((resolve, reject)=>{
          if(markers == null) reject("markers cannot be null");
          markers.forEach(marker => {
            markersPlugin.hideMarker(marker.markerId);
          });
          resolve("Markers successfully hidden!");
        })
      }

      function viewPortal(idLink, fileType){
        allowMarkerCreation = false;
        return new Promise((resolve, reject) => {
          console.log(`loading /images/panoramas/${idLink}.${fileType}`);
          viewer.setPanorama(`/images/panoramas/${idLink}.${fileType}`).then(hideMarkers(markerMasterList.filter(marker => marker.idLink == idLink))).then(resolve(`Successfully viewing portal ${idLink}!`));
        })
      }

      function loadPortal(idLink, fileType){
        //  Needs to load portal markers by getting the json data with all the
        //  portal data in it.
        markersPlugin.clearMarkers();
        viewer.setPanorama(`/images/panoramas/${idLink}.${fileType}`);
      }

      function transitionToViewPortal(idLink){
        getImageFileTypeFromPortalId(idLink).then(ft => viewPortal(idLink, ft));
      }

      function addMarker(){
        if(!allowMarkerCreation) return;
        let idLink = document.querySelector("#create-marker-text-id-link").value;
        console.log(`IDLINK: ${idLink}`);
        let tempId = createUUID();
        markerMasterList.push(new Marker(idLink, tempId, clickLocs));
        createPolygonRadMarker(tempId, clickLocs, onClick = (e, marker, data)=>{
          console.log(data);
          transitionToViewPortal(idLink);

        });
        updatePolygonRadMarkerStyle(tempId,
          new RGBA(225, 28, 82, .2),
          new RGBA(176, 25, 126, .8));
        markersPlugin.removeMarker("transportMarker");
        clickLocs = []
      }
      function removeMarker(markerId){
        return new Promise((resolve, reject)=>{
          markersPlugin.removeMarker(markerMasterList.filter(marker => markerId == marker.markerId)[0]);
          markerMasterList = markerMasterList.filter(emid => emid !== markerId);
          resolve(`Marker ${markerId} removed!`)
        })

      }
      function finalizePortal(){
        let xhr = new XMLHttpRequest();
        xhr.open("POST", "editor", true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify({
            "type": "finalize portal",
            "markers": markerMasterList,
        }));
      }

      function updateGallery(){
        return new Promise((resolve, reject)=>{
          let images = [];
           fetch("/portals").then(
            response => response.json()).then(
              data => {
                let boxCount = 18;
                console.log(data);
                for(let i = 0; i < (data.length < boxCount ? data.length : boxCount); i++){
                  images.push(data[i]);
                }
                console.log(images);
                let imgs = document.getElementsByClassName("portal-thumbnail");

                for(let i = 0; i < images.length; i++){
                  //  console.log("IMAGE: " + images[i]);
                  imgs[i].setAttribute("src","/images/panoramas/"+images[i]);
                  imgs[i].setAttribute("onclick","copyPortalId(this)");
                  imgs[i].style.cursor = "pointer";
                }
                for(let i = images.length; i < boxCount; i++){
                  imgs[i].style.cursor = "default";
                }
                resolve(true);
              }
            );
        })
      }

      function toggleGallery(){
        let gallery = document.getElementById("portal-gallery");
        if(gallery.style.opacity == 1){
          gallery.style.opacity = "0";
          gallery.style.pointerEvents = "none";
        }
        else{
          gallery.style.opacity = "1";
          gallery.style.pointerEvents = "all";
        }
      }

      function copyPortalId(element){
        let im = element.src.split('.');
        im = im.slice(0,im.length-1).join();
        im = im.split("/");
        im = im[im.length-1];
        //im = im.split('=')[1];
        document.getElementById("create-marker-text-id-link").value = im;
        copyToClipboard(im);
        toggleGallery();
      }

      viewer.on('click', (e, data) => {
        if(!data.rightclick){
          if(!allowMarkerCreation) return;
          if(clickLocs.length == 0){
            clickLocs = [[data.longitude, data.latitude]];
            createPolygonRadMarker("transportMarker", clickLocs);
          }
          else if(clickLocs.length == 4){
            clickLocs = [];
            markersPlugin.removeMarker("transportMarker");
          }
          else{
            clickLocs.push([data.longitude,data.latitude]);
            updatePolygonRadMarkerPosition("transportMarker", clickLocs);
          }
        }
      });


  </script>

</body>
</html>
